// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: proto/cryptocurrency.proto

package ccpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CryptoCurrencyClient is the client API for CryptoCurrency service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptoCurrencyClient interface {
	ListCryptoCurrencys(ctx context.Context, in *ListCryptoCurrencysRequest, opts ...grpc.CallOption) (*ListCryptoCurrencysResponse, error)
	GetCryptoCurrency(ctx context.Context, in *GetCryptoCurrencyRequest, opts ...grpc.CallOption) (*GetCryptoCurrencyResponse, error)
	CreateCryptoCurrency(ctx context.Context, in *CreateCryptoCurrencyRequest, opts ...grpc.CallOption) (*CreateCryptoCurrencyResponse, error)
	UpdateCryptoCurrency(ctx context.Context, in *UpdateCryptoCurrencyRequest, opts ...grpc.CallOption) (*UpdateCryptoCurrencyResponse, error)
	DeleteCryptoCurrency(ctx context.Context, in *DeleteCryptoCurrencyRequest, opts ...grpc.CallOption) (*DeleteCryptoCurrencyResponse, error)
	UpVote(ctx context.Context, in *UpVoteRequest, opts ...grpc.CallOption) (*UpVoteResponse, error)
	DownVote(ctx context.Context, in *DownVoteRequest, opts ...grpc.CallOption) (*DownVoteResponse, error)
}

type cryptoCurrencyClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoCurrencyClient(cc grpc.ClientConnInterface) CryptoCurrencyClient {
	return &cryptoCurrencyClient{cc}
}

func (c *cryptoCurrencyClient) ListCryptoCurrencys(ctx context.Context, in *ListCryptoCurrencysRequest, opts ...grpc.CallOption) (*ListCryptoCurrencysResponse, error) {
	out := new(ListCryptoCurrencysResponse)
	err := c.cc.Invoke(ctx, "/CryptoCurrency/ListCryptoCurrencys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoCurrencyClient) GetCryptoCurrency(ctx context.Context, in *GetCryptoCurrencyRequest, opts ...grpc.CallOption) (*GetCryptoCurrencyResponse, error) {
	out := new(GetCryptoCurrencyResponse)
	err := c.cc.Invoke(ctx, "/CryptoCurrency/GetCryptoCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoCurrencyClient) CreateCryptoCurrency(ctx context.Context, in *CreateCryptoCurrencyRequest, opts ...grpc.CallOption) (*CreateCryptoCurrencyResponse, error) {
	out := new(CreateCryptoCurrencyResponse)
	err := c.cc.Invoke(ctx, "/CryptoCurrency/CreateCryptoCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoCurrencyClient) UpdateCryptoCurrency(ctx context.Context, in *UpdateCryptoCurrencyRequest, opts ...grpc.CallOption) (*UpdateCryptoCurrencyResponse, error) {
	out := new(UpdateCryptoCurrencyResponse)
	err := c.cc.Invoke(ctx, "/CryptoCurrency/UpdateCryptoCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoCurrencyClient) DeleteCryptoCurrency(ctx context.Context, in *DeleteCryptoCurrencyRequest, opts ...grpc.CallOption) (*DeleteCryptoCurrencyResponse, error) {
	out := new(DeleteCryptoCurrencyResponse)
	err := c.cc.Invoke(ctx, "/CryptoCurrency/DeleteCryptoCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoCurrencyClient) UpVote(ctx context.Context, in *UpVoteRequest, opts ...grpc.CallOption) (*UpVoteResponse, error) {
	out := new(UpVoteResponse)
	err := c.cc.Invoke(ctx, "/CryptoCurrency/UpVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoCurrencyClient) DownVote(ctx context.Context, in *DownVoteRequest, opts ...grpc.CallOption) (*DownVoteResponse, error) {
	out := new(DownVoteResponse)
	err := c.cc.Invoke(ctx, "/CryptoCurrency/DownVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptoCurrencyServer is the server API for CryptoCurrency service.
// All implementations must embed UnimplementedCryptoCurrencyServer
// for forward compatibility
type CryptoCurrencyServer interface {
	ListCryptoCurrencys(context.Context, *ListCryptoCurrencysRequest) (*ListCryptoCurrencysResponse, error)
	GetCryptoCurrency(context.Context, *GetCryptoCurrencyRequest) (*GetCryptoCurrencyResponse, error)
	CreateCryptoCurrency(context.Context, *CreateCryptoCurrencyRequest) (*CreateCryptoCurrencyResponse, error)
	UpdateCryptoCurrency(context.Context, *UpdateCryptoCurrencyRequest) (*UpdateCryptoCurrencyResponse, error)
	DeleteCryptoCurrency(context.Context, *DeleteCryptoCurrencyRequest) (*DeleteCryptoCurrencyResponse, error)
	UpVote(context.Context, *UpVoteRequest) (*UpVoteResponse, error)
	DownVote(context.Context, *DownVoteRequest) (*DownVoteResponse, error)
	mustEmbedUnimplementedCryptoCurrencyServer()
}

// UnimplementedCryptoCurrencyServer must be embedded to have forward compatible implementations.
type UnimplementedCryptoCurrencyServer struct {
}

func (UnimplementedCryptoCurrencyServer) ListCryptoCurrencys(context.Context, *ListCryptoCurrencysRequest) (*ListCryptoCurrencysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCryptoCurrencys not implemented")
}
func (UnimplementedCryptoCurrencyServer) GetCryptoCurrency(context.Context, *GetCryptoCurrencyRequest) (*GetCryptoCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCryptoCurrency not implemented")
}
func (UnimplementedCryptoCurrencyServer) CreateCryptoCurrency(context.Context, *CreateCryptoCurrencyRequest) (*CreateCryptoCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCryptoCurrency not implemented")
}
func (UnimplementedCryptoCurrencyServer) UpdateCryptoCurrency(context.Context, *UpdateCryptoCurrencyRequest) (*UpdateCryptoCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCryptoCurrency not implemented")
}
func (UnimplementedCryptoCurrencyServer) DeleteCryptoCurrency(context.Context, *DeleteCryptoCurrencyRequest) (*DeleteCryptoCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCryptoCurrency not implemented")
}
func (UnimplementedCryptoCurrencyServer) UpVote(context.Context, *UpVoteRequest) (*UpVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpVote not implemented")
}
func (UnimplementedCryptoCurrencyServer) DownVote(context.Context, *DownVoteRequest) (*DownVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownVote not implemented")
}
func (UnimplementedCryptoCurrencyServer) mustEmbedUnimplementedCryptoCurrencyServer() {}

// UnsafeCryptoCurrencyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptoCurrencyServer will
// result in compilation errors.
type UnsafeCryptoCurrencyServer interface {
	mustEmbedUnimplementedCryptoCurrencyServer()
}

func RegisterCryptoCurrencyServer(s grpc.ServiceRegistrar, srv CryptoCurrencyServer) {
	s.RegisterService(&CryptoCurrency_ServiceDesc, srv)
}

func _CryptoCurrency_ListCryptoCurrencys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCryptoCurrencysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoCurrencyServer).ListCryptoCurrencys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CryptoCurrency/ListCryptoCurrencys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoCurrencyServer).ListCryptoCurrencys(ctx, req.(*ListCryptoCurrencysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoCurrency_GetCryptoCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCryptoCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoCurrencyServer).GetCryptoCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CryptoCurrency/GetCryptoCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoCurrencyServer).GetCryptoCurrency(ctx, req.(*GetCryptoCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoCurrency_CreateCryptoCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCryptoCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoCurrencyServer).CreateCryptoCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CryptoCurrency/CreateCryptoCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoCurrencyServer).CreateCryptoCurrency(ctx, req.(*CreateCryptoCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoCurrency_UpdateCryptoCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCryptoCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoCurrencyServer).UpdateCryptoCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CryptoCurrency/UpdateCryptoCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoCurrencyServer).UpdateCryptoCurrency(ctx, req.(*UpdateCryptoCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoCurrency_DeleteCryptoCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCryptoCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoCurrencyServer).DeleteCryptoCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CryptoCurrency/DeleteCryptoCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoCurrencyServer).DeleteCryptoCurrency(ctx, req.(*DeleteCryptoCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoCurrency_UpVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoCurrencyServer).UpVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CryptoCurrency/UpVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoCurrencyServer).UpVote(ctx, req.(*UpVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoCurrency_DownVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoCurrencyServer).DownVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CryptoCurrency/DownVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoCurrencyServer).DownVote(ctx, req.(*DownVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CryptoCurrency_ServiceDesc is the grpc.ServiceDesc for CryptoCurrency service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryptoCurrency_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CryptoCurrency",
	HandlerType: (*CryptoCurrencyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCryptoCurrencys",
			Handler:    _CryptoCurrency_ListCryptoCurrencys_Handler,
		},
		{
			MethodName: "GetCryptoCurrency",
			Handler:    _CryptoCurrency_GetCryptoCurrency_Handler,
		},
		{
			MethodName: "CreateCryptoCurrency",
			Handler:    _CryptoCurrency_CreateCryptoCurrency_Handler,
		},
		{
			MethodName: "UpdateCryptoCurrency",
			Handler:    _CryptoCurrency_UpdateCryptoCurrency_Handler,
		},
		{
			MethodName: "DeleteCryptoCurrency",
			Handler:    _CryptoCurrency_DeleteCryptoCurrency_Handler,
		},
		{
			MethodName: "UpVote",
			Handler:    _CryptoCurrency_UpVote_Handler,
		},
		{
			MethodName: "DownVote",
			Handler:    _CryptoCurrency_DownVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cryptocurrency.proto",
}
