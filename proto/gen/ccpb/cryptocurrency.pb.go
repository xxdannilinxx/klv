// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.2
// source: proto/cryptocurrency.proto

package ccpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CryptoCurrencyStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Votes int64  `protobuf:"varint,4,opt,name=votes,proto3" json:"votes,omitempty"`
}

func (x *CryptoCurrencyStruct) Reset() {
	*x = CryptoCurrencyStruct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cryptocurrency_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoCurrencyStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoCurrencyStruct) ProtoMessage() {}

func (x *CryptoCurrencyStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cryptocurrency_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoCurrencyStruct.ProtoReflect.Descriptor instead.
func (*CryptoCurrencyStruct) Descriptor() ([]byte, []int) {
	return file_proto_cryptocurrency_proto_rawDescGZIP(), []int{0}
}

func (x *CryptoCurrencyStruct) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CryptoCurrencyStruct) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CryptoCurrencyStruct) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CryptoCurrencyStruct) GetVotes() int64 {
	if x != nil {
		return x.Votes
	}
	return 0
}

type GetMostVotedCryptoCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMostVotedCryptoCurrencyRequest) Reset() {
	*x = GetMostVotedCryptoCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cryptocurrency_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMostVotedCryptoCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMostVotedCryptoCurrencyRequest) ProtoMessage() {}

func (x *GetMostVotedCryptoCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cryptocurrency_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMostVotedCryptoCurrencyRequest.ProtoReflect.Descriptor instead.
func (*GetMostVotedCryptoCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_proto_cryptocurrency_proto_rawDescGZIP(), []int{1}
}

type GetMostVotedCryptoCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cryptocurrency []*CryptoCurrencyStruct `protobuf:"bytes,1,rep,name=cryptocurrency,proto3" json:"cryptocurrency,omitempty"`
}

func (x *GetMostVotedCryptoCurrencyResponse) Reset() {
	*x = GetMostVotedCryptoCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cryptocurrency_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMostVotedCryptoCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMostVotedCryptoCurrencyResponse) ProtoMessage() {}

func (x *GetMostVotedCryptoCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cryptocurrency_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMostVotedCryptoCurrencyResponse.ProtoReflect.Descriptor instead.
func (*GetMostVotedCryptoCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_proto_cryptocurrency_proto_rawDescGZIP(), []int{2}
}

func (x *GetMostVotedCryptoCurrencyResponse) GetCryptocurrency() []*CryptoCurrencyStruct {
	if x != nil {
		return x.Cryptocurrency
	}
	return nil
}

type GetCryptoCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCryptoCurrencyRequest) Reset() {
	*x = GetCryptoCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cryptocurrency_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoCurrencyRequest) ProtoMessage() {}

func (x *GetCryptoCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cryptocurrency_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoCurrencyRequest.ProtoReflect.Descriptor instead.
func (*GetCryptoCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_proto_cryptocurrency_proto_rawDescGZIP(), []int{3}
}

func (x *GetCryptoCurrencyRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetCryptoCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cryptocurrency *CryptoCurrencyStruct `protobuf:"bytes,1,opt,name=cryptocurrency,proto3" json:"cryptocurrency,omitempty"`
}

func (x *GetCryptoCurrencyResponse) Reset() {
	*x = GetCryptoCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cryptocurrency_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoCurrencyResponse) ProtoMessage() {}

func (x *GetCryptoCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cryptocurrency_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoCurrencyResponse.ProtoReflect.Descriptor instead.
func (*GetCryptoCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_proto_cryptocurrency_proto_rawDescGZIP(), []int{4}
}

func (x *GetCryptoCurrencyResponse) GetCryptocurrency() *CryptoCurrencyStruct {
	if x != nil {
		return x.Cryptocurrency
	}
	return nil
}

type CreateCryptoCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cryptocurrency *CryptoCurrencyStruct `protobuf:"bytes,1,opt,name=cryptocurrency,proto3" json:"cryptocurrency,omitempty"`
}

func (x *CreateCryptoCurrencyRequest) Reset() {
	*x = CreateCryptoCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cryptocurrency_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCryptoCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCryptoCurrencyRequest) ProtoMessage() {}

func (x *CreateCryptoCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cryptocurrency_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCryptoCurrencyRequest.ProtoReflect.Descriptor instead.
func (*CreateCryptoCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_proto_cryptocurrency_proto_rawDescGZIP(), []int{5}
}

func (x *CreateCryptoCurrencyRequest) GetCryptocurrency() *CryptoCurrencyStruct {
	if x != nil {
		return x.Cryptocurrency
	}
	return nil
}

type CreateCryptoCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cryptocurrency *CryptoCurrencyStruct `protobuf:"bytes,1,opt,name=cryptocurrency,proto3" json:"cryptocurrency,omitempty"`
}

func (x *CreateCryptoCurrencyResponse) Reset() {
	*x = CreateCryptoCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cryptocurrency_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCryptoCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCryptoCurrencyResponse) ProtoMessage() {}

func (x *CreateCryptoCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cryptocurrency_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCryptoCurrencyResponse.ProtoReflect.Descriptor instead.
func (*CreateCryptoCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_proto_cryptocurrency_proto_rawDescGZIP(), []int{6}
}

func (x *CreateCryptoCurrencyResponse) GetCryptocurrency() *CryptoCurrencyStruct {
	if x != nil {
		return x.Cryptocurrency
	}
	return nil
}

type UpdateCryptoCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cryptocurrency *CryptoCurrencyStruct `protobuf:"bytes,1,opt,name=cryptocurrency,proto3" json:"cryptocurrency,omitempty"`
}

func (x *UpdateCryptoCurrencyRequest) Reset() {
	*x = UpdateCryptoCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cryptocurrency_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCryptoCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCryptoCurrencyRequest) ProtoMessage() {}

func (x *UpdateCryptoCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cryptocurrency_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCryptoCurrencyRequest.ProtoReflect.Descriptor instead.
func (*UpdateCryptoCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_proto_cryptocurrency_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateCryptoCurrencyRequest) GetCryptocurrency() *CryptoCurrencyStruct {
	if x != nil {
		return x.Cryptocurrency
	}
	return nil
}

type UpdateCryptoCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cryptocurrency *CryptoCurrencyStruct `protobuf:"bytes,1,opt,name=cryptocurrency,proto3" json:"cryptocurrency,omitempty"`
}

func (x *UpdateCryptoCurrencyResponse) Reset() {
	*x = UpdateCryptoCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cryptocurrency_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCryptoCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCryptoCurrencyResponse) ProtoMessage() {}

func (x *UpdateCryptoCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cryptocurrency_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCryptoCurrencyResponse.ProtoReflect.Descriptor instead.
func (*UpdateCryptoCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_proto_cryptocurrency_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateCryptoCurrencyResponse) GetCryptocurrency() *CryptoCurrencyStruct {
	if x != nil {
		return x.Cryptocurrency
	}
	return nil
}

type DeleteCryptoCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCryptoCurrencyRequest) Reset() {
	*x = DeleteCryptoCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cryptocurrency_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCryptoCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCryptoCurrencyRequest) ProtoMessage() {}

func (x *DeleteCryptoCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cryptocurrency_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCryptoCurrencyRequest.ProtoReflect.Descriptor instead.
func (*DeleteCryptoCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_proto_cryptocurrency_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteCryptoCurrencyRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteCryptoCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteCryptoCurrencyResponse) Reset() {
	*x = DeleteCryptoCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cryptocurrency_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCryptoCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCryptoCurrencyResponse) ProtoMessage() {}

func (x *DeleteCryptoCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cryptocurrency_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCryptoCurrencyResponse.ProtoReflect.Descriptor instead.
func (*DeleteCryptoCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_proto_cryptocurrency_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteCryptoCurrencyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UpVoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cryptocurrency *CryptoCurrencyStruct `protobuf:"bytes,2,opt,name=cryptocurrency,proto3" json:"cryptocurrency,omitempty"`
}

func (x *UpVoteRequest) Reset() {
	*x = UpVoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cryptocurrency_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpVoteRequest) ProtoMessage() {}

func (x *UpVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cryptocurrency_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpVoteRequest.ProtoReflect.Descriptor instead.
func (*UpVoteRequest) Descriptor() ([]byte, []int) {
	return file_proto_cryptocurrency_proto_rawDescGZIP(), []int{11}
}

func (x *UpVoteRequest) GetCryptocurrency() *CryptoCurrencyStruct {
	if x != nil {
		return x.Cryptocurrency
	}
	return nil
}

type UpVoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cryptocurrency *CryptoCurrencyStruct `protobuf:"bytes,1,opt,name=cryptocurrency,proto3" json:"cryptocurrency,omitempty"`
}

func (x *UpVoteResponse) Reset() {
	*x = UpVoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cryptocurrency_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpVoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpVoteResponse) ProtoMessage() {}

func (x *UpVoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cryptocurrency_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpVoteResponse.ProtoReflect.Descriptor instead.
func (*UpVoteResponse) Descriptor() ([]byte, []int) {
	return file_proto_cryptocurrency_proto_rawDescGZIP(), []int{12}
}

func (x *UpVoteResponse) GetCryptocurrency() *CryptoCurrencyStruct {
	if x != nil {
		return x.Cryptocurrency
	}
	return nil
}

type DownVoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cryptocurrency *CryptoCurrencyStruct `protobuf:"bytes,2,opt,name=cryptocurrency,proto3" json:"cryptocurrency,omitempty"`
}

func (x *DownVoteRequest) Reset() {
	*x = DownVoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cryptocurrency_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownVoteRequest) ProtoMessage() {}

func (x *DownVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cryptocurrency_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownVoteRequest.ProtoReflect.Descriptor instead.
func (*DownVoteRequest) Descriptor() ([]byte, []int) {
	return file_proto_cryptocurrency_proto_rawDescGZIP(), []int{13}
}

func (x *DownVoteRequest) GetCryptocurrency() *CryptoCurrencyStruct {
	if x != nil {
		return x.Cryptocurrency
	}
	return nil
}

type DownVoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cryptocurrency *CryptoCurrencyStruct `protobuf:"bytes,1,opt,name=cryptocurrency,proto3" json:"cryptocurrency,omitempty"`
}

func (x *DownVoteResponse) Reset() {
	*x = DownVoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cryptocurrency_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownVoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownVoteResponse) ProtoMessage() {}

func (x *DownVoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cryptocurrency_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownVoteResponse.ProtoReflect.Descriptor instead.
func (*DownVoteResponse) Descriptor() ([]byte, []int) {
	return file_proto_cryptocurrency_proto_rawDescGZIP(), []int{14}
}

func (x *DownVoteResponse) GetCryptocurrency() *CryptoCurrencyStruct {
	if x != nil {
		return x.Cryptocurrency
	}
	return nil
}

var File_proto_cryptocurrency_proto protoreflect.FileDescriptor

var file_proto_cryptocurrency_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x66, 0x0a, 0x14,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x22, 0x23, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x56,
	0x6f, 0x74, 0x65, 0x64, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x63, 0x0a, 0x22, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x2a,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x5c, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x22, 0x5d, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x22, 0x5c, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x22, 0x5d, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x22, 0x2d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x38, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x4e, 0x0a, 0x0d, 0x55, 0x70, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x4f, 0x0a, 0x0e, 0x55, 0x70, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x50, 0x0a, 0x0f, 0x44, 0x6f,
	0x77, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x51, 0x0a, 0x10,
	0x44, 0x6f, 0x77, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x32,
	0x9e, 0x04, 0x0a, 0x0e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x65, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x56, 0x6f, 0x74,
	0x65, 0x64, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x22, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x64, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x56, 0x6f,
	0x74, 0x65, 0x64, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x19,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x1c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x55, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x0e,
	0x2e, 0x55, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f,
	0x2e, 0x55, 0x70, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x08, 0x44, 0x6f, 0x77, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x44, 0x6f,
	0x77, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x11, 0x5a, 0x0f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63,
	0x63, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_cryptocurrency_proto_rawDescOnce sync.Once
	file_proto_cryptocurrency_proto_rawDescData = file_proto_cryptocurrency_proto_rawDesc
)

func file_proto_cryptocurrency_proto_rawDescGZIP() []byte {
	file_proto_cryptocurrency_proto_rawDescOnce.Do(func() {
		file_proto_cryptocurrency_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_cryptocurrency_proto_rawDescData)
	})
	return file_proto_cryptocurrency_proto_rawDescData
}

var file_proto_cryptocurrency_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_proto_cryptocurrency_proto_goTypes = []interface{}{
	(*CryptoCurrencyStruct)(nil),               // 0: CryptoCurrencyStruct
	(*GetMostVotedCryptoCurrencyRequest)(nil),  // 1: GetMostVotedCryptoCurrencyRequest
	(*GetMostVotedCryptoCurrencyResponse)(nil), // 2: GetMostVotedCryptoCurrencyResponse
	(*GetCryptoCurrencyRequest)(nil),           // 3: GetCryptoCurrencyRequest
	(*GetCryptoCurrencyResponse)(nil),          // 4: GetCryptoCurrencyResponse
	(*CreateCryptoCurrencyRequest)(nil),        // 5: CreateCryptoCurrencyRequest
	(*CreateCryptoCurrencyResponse)(nil),       // 6: CreateCryptoCurrencyResponse
	(*UpdateCryptoCurrencyRequest)(nil),        // 7: UpdateCryptoCurrencyRequest
	(*UpdateCryptoCurrencyResponse)(nil),       // 8: UpdateCryptoCurrencyResponse
	(*DeleteCryptoCurrencyRequest)(nil),        // 9: DeleteCryptoCurrencyRequest
	(*DeleteCryptoCurrencyResponse)(nil),       // 10: DeleteCryptoCurrencyResponse
	(*UpVoteRequest)(nil),                      // 11: UpVoteRequest
	(*UpVoteResponse)(nil),                     // 12: UpVoteResponse
	(*DownVoteRequest)(nil),                    // 13: DownVoteRequest
	(*DownVoteResponse)(nil),                   // 14: DownVoteResponse
}
var file_proto_cryptocurrency_proto_depIdxs = []int32{
	0,  // 0: GetMostVotedCryptoCurrencyResponse.cryptocurrency:type_name -> CryptoCurrencyStruct
	0,  // 1: GetCryptoCurrencyResponse.cryptocurrency:type_name -> CryptoCurrencyStruct
	0,  // 2: CreateCryptoCurrencyRequest.cryptocurrency:type_name -> CryptoCurrencyStruct
	0,  // 3: CreateCryptoCurrencyResponse.cryptocurrency:type_name -> CryptoCurrencyStruct
	0,  // 4: UpdateCryptoCurrencyRequest.cryptocurrency:type_name -> CryptoCurrencyStruct
	0,  // 5: UpdateCryptoCurrencyResponse.cryptocurrency:type_name -> CryptoCurrencyStruct
	0,  // 6: UpVoteRequest.cryptocurrency:type_name -> CryptoCurrencyStruct
	0,  // 7: UpVoteResponse.cryptocurrency:type_name -> CryptoCurrencyStruct
	0,  // 8: DownVoteRequest.cryptocurrency:type_name -> CryptoCurrencyStruct
	0,  // 9: DownVoteResponse.cryptocurrency:type_name -> CryptoCurrencyStruct
	1,  // 10: CryptoCurrency.GetMostVotedCryptoCurrency:input_type -> GetMostVotedCryptoCurrencyRequest
	3,  // 11: CryptoCurrency.GetCryptoCurrency:input_type -> GetCryptoCurrencyRequest
	5,  // 12: CryptoCurrency.CreateCryptoCurrency:input_type -> CreateCryptoCurrencyRequest
	7,  // 13: CryptoCurrency.UpdateCryptoCurrency:input_type -> UpdateCryptoCurrencyRequest
	9,  // 14: CryptoCurrency.DeleteCryptoCurrency:input_type -> DeleteCryptoCurrencyRequest
	11, // 15: CryptoCurrency.UpVote:input_type -> UpVoteRequest
	13, // 16: CryptoCurrency.DownVote:input_type -> DownVoteRequest
	2,  // 17: CryptoCurrency.GetMostVotedCryptoCurrency:output_type -> GetMostVotedCryptoCurrencyResponse
	4,  // 18: CryptoCurrency.GetCryptoCurrency:output_type -> GetCryptoCurrencyResponse
	6,  // 19: CryptoCurrency.CreateCryptoCurrency:output_type -> CreateCryptoCurrencyResponse
	8,  // 20: CryptoCurrency.UpdateCryptoCurrency:output_type -> UpdateCryptoCurrencyResponse
	10, // 21: CryptoCurrency.DeleteCryptoCurrency:output_type -> DeleteCryptoCurrencyResponse
	12, // 22: CryptoCurrency.UpVote:output_type -> UpVoteResponse
	14, // 23: CryptoCurrency.DownVote:output_type -> DownVoteResponse
	17, // [17:24] is the sub-list for method output_type
	10, // [10:17] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_proto_cryptocurrency_proto_init() }
func file_proto_cryptocurrency_proto_init() {
	if File_proto_cryptocurrency_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_cryptocurrency_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoCurrencyStruct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cryptocurrency_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMostVotedCryptoCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cryptocurrency_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMostVotedCryptoCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cryptocurrency_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cryptocurrency_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cryptocurrency_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCryptoCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cryptocurrency_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCryptoCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cryptocurrency_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCryptoCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cryptocurrency_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCryptoCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cryptocurrency_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCryptoCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cryptocurrency_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCryptoCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cryptocurrency_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpVoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cryptocurrency_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpVoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cryptocurrency_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownVoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cryptocurrency_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownVoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_cryptocurrency_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_cryptocurrency_proto_goTypes,
		DependencyIndexes: file_proto_cryptocurrency_proto_depIdxs,
		MessageInfos:      file_proto_cryptocurrency_proto_msgTypes,
	}.Build()
	File_proto_cryptocurrency_proto = out.File
	file_proto_cryptocurrency_proto_rawDesc = nil
	file_proto_cryptocurrency_proto_goTypes = nil
	file_proto_cryptocurrency_proto_depIdxs = nil
}
